% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_layer_trips.R
\name{add_trips}
\alias{add_trips}
\title{Add Trips}
\usage{
add_trips(map, data = get_map_data(map), stroke_colour = NULL,
  palette = "viridis", trail_length = 180, layer_id = NULL,
  legend = FALSE, legend_options = NULL, legend_format = NULL,
  update_view = TRUE)
}
\arguments{
\item{map}{a mapdeck map object}

\item{data}{data to be used in the layer. All coordinates are expected to be in
Web Mercator Projection}

\item{stroke_colour}{variable of \code{data} or hex colour for the stroke. If used,
\code{elevation} is ignored.}

\item{palette}{string or matrix. String will be one of \code{colourvalues::colour_palettes()}.
A matrix is a 3 or 4 column numeric matrix of values between [0, 255],
where the 4th column represents the alpha.}

\item{trail_length}{}

\item{layer_id}{single value specifying an id for the layer. Use this value to
distinguish between shape layers of the same type. Layers with the same id are likely
to conflict and not plot correctly}

\item{legend}{either a logical indiciating if the legend(s) should be displayed, or
a named list indicating which colour attributes should be included in the legend.}

\item{legend_options}{A list of options for controlling the legend.}

\item{legend_format}{A list containing functions to apply to legend values. See section legend}

\item{update_view}{logical indicating if the map should update the bounds to include this layer}
}
\description{
The Trips Layer takes in lists of coordinate points and renders them as
extruded lines with mitering.
}
\section{data}{


If the \code{data} is a simple feature object, the geometry column is automatically
detected. If the sf object contains more than one geometry column and you want to use a specific one,
you'll need to set the active geometry using \code{sf::st_geometry( x ) <- "your_column" },
where \code{"your_column"} is the name of the column you're activating. See \code{?sf::st_geometry}
}

\section{legend}{


The \code{legend_options} can be used to control the appearance of the legend.
This should be a named list, where the names are one of
\itemize{
  \item{css - a string of valid \code{css} for controlling the appearance of the legend}
  \item{title - a string to use for the title of the legend}
}

If the layer allows different fill and stroke colours, you can use different options for each. See examples in \link{add_arc}.

The \code{legend_format} can be used to control the format of the values in the legend.
This should be a named list, where the names are one of
\itemize{
  \item{fill_colour}
  \item{stroke_colour}
}

depending on which type of colouring the layer supports.

The list elements must be functions to apply to the values in the legend.
}

